import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class YourControllerTest {

    @Test
    void pscCountWidgetResponseTest_AddEquipment() throws Exception {
        // Mock dependencies
        YourDependency mockDependency = mock(YourDependency.class);
        when(mockDependency.countUNOData(2)).thenReturn(5);

        // Create an instance of YourController
        YourController controller = new YourController(mockDependency);

        // Prepare test data
        String title = "Test Title";
        String configObjectName = "Test Config Object";
        String vzid = "Test VZ ID";

        // Invoke the method
        ResponseEntity<String> response = controller.pscCountwidgetResponse(title, configObjectName, vzid);

        // Verify the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        // Assert other expected values in the response body
    }

    @Test
    void pscCountWidgetResponseTest_RemoveEquipment() throws Exception {
        // Mock dependencies
        YourDependency mockDependency = mock(YourDependency.class);
        when(mockDependency.countUNOData(8)).thenReturn(10);

        // Create an instance of YourController
        YourController controller = new YourController(mockDependency);

        // Prepare test data
        String title = "Test Title";
        String configObjectName = "Test Config Object";
        String vzid = "Test VZ ID";

        // Invoke the method
        ResponseEntity<String> response = controller.pscCountwidgetResponse(title, configObjectName, vzid);

        // Verify the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        // Assert other expected values in the response body
    }

    @Test
    void pscCountWidgetResponseTest_QuickLook() throws Exception {
        // Mock dependencies
        YourDependency mockDependency = mock(YourDependency.class);
        when(mockDependency.countUNOData(4)).thenReturn(3);

        // Create an instance of YourController
        YourController controller = new YourController(mockDependency);

        // Prepare test data
        String title = "Test Title";
        String configObjectName = "Test Config Object";
        String vzid = "Test VZ ID";

        // Invoke the method
        ResponseEntity<String> response = controller.pscCountwidgetResponse(title, configObjectName, vzid);

        // Verify the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        // Assert other expected values in the response body
    }

    @Test
    void pscCountWidgetResponseTest_InvalidRequestType() {
        // Mock dependencies
        YourDependency mockDependency = mock(YourDependency.class);

        // Create an instance of YourController
        YourController controller = new YourController(mockDependency);

        // Prepare test data
        String title = "Test Title";
        String configObjectName = "Test Config Object";
        String vzid = "Test VZ ID";

        // Invoke the method and assert exception
        assertThrows(Exception.class, () -> controller.pscCountwidgetResponse(title, configObjectName, vzid));
        // Verify that the exception is thrown as expected
    }

}

