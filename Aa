import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;

public class YourClassTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private YourClass yourClass;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetPscJobData() {
        int pscJobId = 123;

        // Mock the queryForObject method to return a specific result
        String expectedPscJobDetails = "SiteABC";
        Mockito.when(jdbcTemplate.queryForObject(Mockito.anyString(), Mockito.any(Object[].class), Mockito.eq(String.class)))
                .thenReturn(expectedPscJobDetails);

        String result = yourClass.getPscJobData(pscJobId);

        // Verify that the queryForObject method was called with the correct arguments
        Mockito.verify(jdbcTemplate).queryForObject("select site_code from psc_requests where psc_job_id =?", new Object[]{pscJobId}, String.class);

        // Verify that the result is the expected value
        Assert.assertEquals(expectedPscJobDetails, result);
    }
}
